/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type PublishedGalleries = {
  _id: string
  _type: 'publishedGalleries'
  _createdAt: string
  _updatedAt: string
  _rev: string
  menuGalleries?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'web-gallery'
  }>
}

export type WebGallery = {
  _id: string
  _type: 'web-gallery'
  _createdAt: string
  _updatedAt: string
  _rev: string
  galleryName?: LocaleString
  galleryImages?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'artwork'
  }>
  gallerySlug?: Slug
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Seo = {
  _id: string
  _type: 'seo'
  _createdAt: string
  _updatedAt: string
  _rev: string
  description?: string
  keywords?: string
}

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<{
    href?: string
    _type: 'link'
    _key: string
  }>
  level?: number
  _type: 'block'
  _key: string
}>

export type Gallery = {
  _id: string
  _type: 'gallery'
  _createdAt: string
  _updatedAt: string
  _rev: string
  galleryImages?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'artwork'
  }>
  galleryName?: string
}

export type Exhibition = {
  _id: string
  _type: 'exhibition'
  _createdAt: string
  _updatedAt: string
  _rev: string
  exhibitionName?: LocaleString
  visibility?: boolean
  spaceName?: LocaleString
  type?:
    | 'separatutstilling'
    | 'duo-utstilling'
    | 'trio-utstilling'
    | 'gruppeutstilling'
  exhibitionFirstDay?: string
  exhibitionLastDay?: string
}

export type Biography = {
  _id: string
  _type: 'biography'
  _createdAt: string
  _updatedAt: string
  _rev: string
  biography?: LocaleRichText
}

export type LocaleText = {
  _type: 'localeText'
  no?: string
  en?: string
}

export type Artwork = {
  _id: string
  _type: 'artwork'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: LocaleString
  material?: LocaleString
  year?: string
  dimmenstions?: string
  photo?: ArtworkImage
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type ArtworkImage = {
  _type: 'artworkImage'
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  alt?: LocaleText
}

export type LocaleString = {
  _type: 'localeString'
  no?: string
  en?: string
}

export type AboutWorks = {
  _id: string
  _type: 'aboutWorks'
  _createdAt: string
  _updatedAt: string
  _rev: string
  aboutWorks?: LocaleRichText
}

export type LocaleRichText = {
  _type: 'localeRichText'
  no?: RichText
  en?: RichText
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | PublishedGalleries
  | WebGallery
  | Slug
  | Seo
  | RichText
  | Gallery
  | Exhibition
  | Biography
  | LocaleText
  | Artwork
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | ArtworkImage
  | LocaleString
  | AboutWorks
  | LocaleRichText
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../site/src/about/about.client.ts
// Variable: aboutQuery
// Query: *[_type == "aboutWorks"][0]
export type AboutQueryResult = {
  _id: string
  _type: 'aboutWorks'
  _createdAt: string
  _updatedAt: string
  _rev: string
  aboutWorks?: LocaleRichText
} | null

// Source: ../site/src/artwork/forside.client.ts
// Variable: forsideGallerierQuery
// Query: *[_type == "publishedGalleries"][0] {  galleryList[]-> {    'slug': gallerySlug.current,    galleryName {no, en},    'topImage': galleryImages[0]->  }}
export type ForsideGallerierQueryResult = {
  galleryList: null
} | null

// Source: ../site/src/bio/bio.client.ts
// Variable: bioQuery
// Query: coalesce(*[_type == "biography"][0]{  'biography': {       'no': coalesce(biography.no, ""),       'en': coalesce(biography.en, "")     }  },  'result-error')
export type BioQueryResult =
  | {
      biography: {
        no: RichText | ''
        en: RichText | ''
      }
    }
  | 'result-error'

// Source: ../site/src/exhibition/exhibition.client.ts
// Variable: exhibitionQuery
// Query: *[_type == "exhibition" && visibility]{  'exhibitionName': {    'no': exhibitionName.no,    'en': exhibitionName.en  },  'spaceName': {    'no': spaceName.no,    'en': spaceName.en  },  exhibitionFirstDay,  type,}| order(exhibitionFirstDay desc)
export type ExhibitionQueryResult = Array<{
  exhibitionName: {
    no: string | null
    en: string | null
  }
  spaceName: {
    no: string | null
    en: string | null
  }
  exhibitionFirstDay: string | null
  type:
    | 'duo-utstilling'
    | 'gruppeutstilling'
    | 'separatutstilling'
    | 'trio-utstilling'
    | null
}>

// Source: ../site/src/menu/menu.client.ts
// Variable: menuQuery
// Query: *[_type == "publishedGalleries"][0] {  galleryList[]-> {    galleryName {no, en},    'slug' : gallerySlug.current    }}
export type MenuQueryResult = {
  galleryList: null
} | null

// Source: ../site/src/seo/seo.client.ts
// Variable: seoQuery
// Query: coalesce(*[_type == "seo"][0]{    'keywords': coalesce(keywords, ''),     'description': coalesce(description, ''),  },   'result-error'  )
export type SeoQueryResult =
  | {
      keywords: string | ''
      description: string | ''
    }
  | 'result-error'

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "aboutWorks"][0]': AboutQueryResult
    "*[_type == \"publishedGalleries\"][0] {\n  galleryList[]-> {\n    'slug': gallerySlug.current,\n    galleryName {no, en},\n    'topImage': galleryImages[0]->\n  }\n}": ForsideGallerierQueryResult
    "coalesce(*[_type == \"biography\"][0]{\n  'biography': { \n      'no': coalesce(biography.no, \"\"), \n      'en': coalesce(biography.en, \"\") \n    }\n  },\n  'result-error')": BioQueryResult
    "*[_type == \"exhibition\" && visibility]{\n  'exhibitionName': {\n    'no': exhibitionName.no,\n    'en': exhibitionName.en\n  },\n  'spaceName': {\n    'no': spaceName.no,\n    'en': spaceName.en\n  },\n  exhibitionFirstDay,\n  type,\n}\n| order(exhibitionFirstDay desc)": ExhibitionQueryResult
    '*[_type == "publishedGalleries"][0] {\n  galleryList[]-> {\n    galleryName {no, en},\n    \'slug\' : gallerySlug.current\n    }}': MenuQueryResult
    "coalesce(*[_type == \"seo\"][0]{\n    'keywords': coalesce(keywords, ''), \n    'description': coalesce(description, ''),\n  }, \n  'result-error'\n  )": SeoQueryResult
  }
}
