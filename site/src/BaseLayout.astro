---
import './styles/global.scss'
import { ViewTransitions, fade } from 'astro:transitions'
import { getLangFromUrl, useTranslation } from './i18n/utils'
import {generateMenu} from "./menu/menu.util";
export interface Props {
  title: string
  description: string
  keywords: string
}
const language = getLangFromUrl(Astro.url)
const t = useTranslation(language)
const labelOpen = t('nav.labelOpen')
const labelClosed = t('nav.labelClosed')

const { title, keywords, description } = Astro.props
const currentPath = Astro.request.url
  ? new URL(Astro.request.url)?.pathname
  : ''

const menuItems = await generateMenu(language , currentPath)

---

<!doctype html>
<html lang="no">
  <head>
    <meta charset="UTF-8" />
    <ViewTransitions />
    <meta name="viewport" content="width=device-width" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,300;0,500;1,300;1,500&display=swap"
      rel="stylesheet"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <title>{title}</title>
  </head>
  <body data-label-open={labelOpen} data-label-closed={labelClosed}>
    <header id="site-header">
      <label id="nav-toggle-label" class="nav-toggle-label">
        <span id="label-text" class="screen-reader-only">{labelClosed}</span>
        <input
          type="checkbox"
          id="nav-toggle"
          name="nav-toggle"
          class="nav-toggle"
        />
        <span class="icon" id="nav-toggle-icon">
          <span class="icon-part"></span>
          <span class="icon-part"></span>
          <span class="icon-part"></span>
        </span>
      </label>
      <h1 class="logo text-gradient">
        <a href={`/${language}`}>Ã˜ystein Blegen Hoel</a>
      </h1>
    </header>
    <aside id="sidenav">
      <nav>
        <menu>
	        {
		        menuItems.map(({active, href, text,type}) => {
				      if (type === 'group-heading'){
					      return <li><h2>{text}</h2></li>
				      }

			        return <li>
				        <a href={href} class={active ? 'active' : ''}>{text}</a>
		        </li>})
	        }
        </menu>
      </nav>
      <button id="close-button" type="button"
        ><span class="screen-reader-only"
          >{labelOpen} {labelClosed.toLowerCase()}</span
        ></button
      >
    </aside>
    <main transition:animate={fade({ duration: '200ms' })}>
      <slot />
    </main>

    <script>

	    console.log('loading')
      const toggleIcon = () => {
	      console.log('yas')
        const input = document.querySelector<HTMLInputElement>('#nav-toggle')
        const body = document.querySelector('body')
        const labelTextSpan =
          document.querySelector<HTMLSpanElement>('#label-text')
        const iconWrapper = document.querySelector('#nav-toggle-icon')
        const main = document.querySelector<HTMLHtmlElement>('main')
        const sideNav = document.querySelector('#sidenav')
        if (!input?.checked) {
          if (labelTextSpan) {
            labelTextSpan.innerText = document.body.dataset.labelClosed ?? ''
          }
          iconWrapper?.classList.remove('checked')
          main?.removeAttribute('inert')
          sideNav?.classList.remove('open')
          body?.classList.remove('no-scroll')
        } else {
          if (labelTextSpan) {
            labelTextSpan.innerText = document.body.dataset.labelOpen ?? ''
          }
          iconWrapper?.classList.add('checked')
          main?.setAttribute('inert', 'true')
          sideNav?.classList.add('open')
          body?.classList.add('no-scroll')
        }
      }

      const closeSidebar = () => {
        const input = document.querySelector<HTMLInputElement>('#nav-toggle')
        input?.checked ? input.click() : null
      }

      document.addEventListener(
        'astro:page-load',
        () => {
	        console.log('sldfjlsdfj')
          const navToggle = document.querySelector('#nav-toggle')
	        console.log(navToggle)
          navToggle?.addEventListener('click', toggleIcon)
          const closeButton = document.querySelector('#close-button')
          closeButton?.addEventListener('click', closeSidebar)
          const navlinks = document.querySelectorAll('#sidenav a')
          navlinks?.forEach((link) =>
            link.addEventListener('click', closeSidebar),
          )
        },
        { once: false },
      )
    </script>
  </body>
</html>
