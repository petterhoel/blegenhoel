---
import './styles/global.scss'
import { ViewTransitions, fade } from 'astro:transitions'
import type { I18nKey } from './i18n/i18n.string.dto'
import { useTranslation } from './i18n/utils'
import { generateMenu } from './menu/menu.util'
export interface Props {
  title: string
  description: string
  keywords: string
}
const { lang } = Astro.params

const t = useTranslation(lang as I18nKey)
const labelOpen = t('nav.labelOpen')
const labelClosed = t('nav.labelClosed')

const { title, keywords, description } = Astro.props
const currentPath = Astro.request.url
  ? new URL(Astro.request.url)?.pathname
  : ''

const menuItems = await generateMenu(lang as I18nKey, currentPath)
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <ViewTransitions />
    <meta name="viewport" content="width=device-width" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,300;0,500;1,300;1,500&display=swap"
      rel="stylesheet"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <title>{title}</title>
  </head>
  <body data-label-open={labelOpen} data-label-closed={labelClosed}>
    <header id="site-header">
      <label id="nav-toggle-label" class="nav-toggle-label">
        <span id="label-text" class="screen-reader-only">{labelClosed}</span>
        <input
          type="checkbox"
          id="nav-toggle"
          name="nav-toggle"
          class="nav-toggle"
        />
        <span class="icon" id="nav-toggle-icon">
          <span class="icon-part"></span>
          <span class="icon-part"></span>
          <span class="icon-part"></span>
        </span>
      </label>
      <h1 class="logo text-gradient">
        <a href={`/${lang}`}>Ã˜ystein Blegen Hoel</a>
      </h1>
    </header>
    <aside id="sidenav">
      <nav>
        <menu>
	        {
		        menuItems.menuItems.map(({active, href, text,type}) => {
				      if (type === 'group-heading'){
					      return <li><h2>{text}</h2></li>
				      }

			        return <li>
				        <a href={href} class={active ? 'active' : ''}>{text}</a>
		        </li>})
	        }
		        <li><h2>{menuItems.languageItems.heading}</h2></li>
		        <li class="language-switcher">
				        <a href={menuItems.languageItems.href}> <svg xmlns="http://www.w3.org/2000/svg"
						             viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M266.3 48.3L232.5 73.6c-5.4 4-8.5 10.4-8.5 17.1l0 9.1c0 6.8 5.5 12.3 12.3 12.3c2.4 0 4.8-.7 6.8-2.1l41.8-27.9c2-1.3 4.4-2.1 6.8-2.1l1 0c6.2 0 11.3 5.1 11.3 11.3c0 3-1.2 5.9-3.3 8l-19.9 19.9c-5.8 5.8-12.9 10.2-20.7 12.8l-26.5 8.8c-5.8 1.9-9.6 7.3-9.6 13.4c0 3.7-1.5 7.3-4.1 10l-17.9 17.9c-6.4 6.4-9.9 15-9.9 24l0 4.3c0 16.4 13.6 29.7 29.9 29.7c11 0 21.2-6.2 26.1-16l4-8.1c2.4-4.8 7.4-7.9 12.8-7.9c4.5 0 8.7 2.1 11.4 5.7l16.3 21.7c2.1 2.9 5.5 4.5 9.1 4.5c8.4 0 13.9-8.9 10.1-16.4l-1.1-2.3c-3.5-7 0-15.5 7.5-18l21.2-7.1c7.6-2.5 12.7-9.6 12.7-17.6c0-10.3 8.3-18.6 18.6-18.6l29.4 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-20.7 0c-7.2 0-14.2 2.9-19.3 8l-4.7 4.7c-2.1 2.1-3.3 5-3.3 8c0 6.2 5.1 11.3 11.3 11.3l11.3 0c6 0 11.8 2.4 16 6.6l6.5 6.5c1.8 1.8 2.8 4.3 2.8 6.8s-1 5-2.8 6.8l-7.5 7.5C386 262 384 266.9 384 272s2 10 5.7 13.7L408 304c10.2 10.2 24.1 16 38.6 16l7.3 0c6.5-20.2 10-41.7 10-64c0-111.4-87.6-202.4-197.7-207.7zm172 307.9c-3.7-2.6-8.2-4.1-13-4.1c-6 0-11.8-2.4-16-6.6L396 332c-7.7-7.7-18-12-28.9-12c-9.7 0-19.2-3.5-26.6-9.8L314 287.4c-11.6-9.9-26.4-15.4-41.7-15.4l-20.9 0c-12.6 0-25 3.7-35.5 10.7L188.5 301c-17.8 11.9-28.5 31.9-28.5 53.3l0 3.2c0 17 6.7 33.3 18.7 45.3l16 16c8.5 8.5 20 13.3 32 13.3l21.3 0c13.3 0 24 10.7 24 24c0 2.5 .4 5 1.1 7.3c71.3-5.8 132.5-47.6 165.2-107.2zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zM187.3 100.7c-6.2-6.2-16.4-6.2-22.6 0l-32 32c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l32-32c6.2-6.2 6.2-16.4 0-22.6z"/></svg>

						    <span>{menuItems.languageItems.text}</span>
				        </a>
		        </li>
        </menu>
      </nav>
      <button id="close-button" type="button"
        ><span class="screen-reader-only"
          >{labelOpen} {labelClosed.toLowerCase()}</span
        ></button
      >
    </aside>
    <main transition:animate={fade({ duration: '200ms' })}>
      <slot />
    </main>

    <script>

      const toggleIcon = () => {
        const input = document.querySelector<HTMLInputElement>('#nav-toggle')
        const body = document.querySelector('body')
        const labelTextSpan =
          document.querySelector<HTMLSpanElement>('#label-text')
        const iconWrapper = document.querySelector('#nav-toggle-icon')
        const main = document.querySelector<HTMLHtmlElement>('main')
        const sideNav = document.querySelector('#sidenav')
        if (!input?.checked) {
          if (labelTextSpan) {
            labelTextSpan.innerText = document.body.dataset.labelClosed ?? ''
          }
          iconWrapper?.classList.remove('checked')
          main?.removeAttribute('inert')
          sideNav?.classList.remove('open')
          body?.classList.remove('no-scroll')
        } else {
          if (labelTextSpan) {
            labelTextSpan.innerText = document.body.dataset.labelOpen ?? ''
          }
          iconWrapper?.classList.add('checked')
          main?.setAttribute('inert', 'true')
          sideNav?.classList.add('open')
          body?.classList.add('no-scroll')
        }
      }

      const closeSidebar = () => {
        const input = document.querySelector<HTMLInputElement>('#nav-toggle')
        input?.checked ? input.click() : null
      }

      document.addEventListener(
        'astro:page-load',
        () => {
          const navToggle = document.querySelector('#nav-toggle')
          navToggle?.addEventListener('click', toggleIcon)
          const closeButton = document.querySelector('#close-button')
          closeButton?.addEventListener('click', closeSidebar)
          const navlinks = document.querySelectorAll('#sidenav a')
          navlinks?.forEach((link) =>
            link.addEventListener('click', closeSidebar),
          )
        },
        { once: false },
      )
    </script>
  </body>
</html>
